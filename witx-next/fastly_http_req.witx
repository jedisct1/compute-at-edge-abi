(module $fastly_http_req
    (use * from $typenames)

    (@interface func (export "body_downstream_get")
        (result $err (expected
                (tuple $request_handle $body_handle)
                (error $fastly_status)))
    )

    (@interface func (export "cache_override_set")
        (param $h $request_handle)
        (param $tag $cache_override_tag)
        (param $ttl u32)
        (param $stale_while_revalidate u32)
        (result $err (expected (error $fastly_status)))
    )

    (@interface func (export "cache_override_v2_set")
        (param $h $request_handle)
        (param $tag $cache_override_tag)
        (param $ttl u32)
        (param $stale_while_revalidate u32)
        (param $sk (list u8))
        (result $err (expected (error $fastly_status)))
    )

    (@interface func (export "downstream_client_ip_addr")
        ;; must be a 16-byte array
        (param $addr_octets_out (@witx pointer (@witx char8)))
        (result $err (expected $num_bytes (error $fastly_status)))
    )

    (@interface func (export "downstream_client_h2_fingerprint")
        (param $h2fp_out (@witx pointer (@witx char8)))
        (param $h2fp_max_len (@witx usize))
        (param $nwritten_out (@witx pointer (@witx usize)))
        (result $err (expected (error $fastly_status)))
    )

    (@interface func (export "downstream_client_request_id")
        (param $reqid_out (@witx pointer (@witx char8)))
        (param $reqid_max_len (@witx usize))
        (param $nwritten_out (@witx pointer (@witx usize)))
        (result $err (expected (error $fastly_status)))
    )

    (@interface func (export "downstream_client_oh_fingerprint")
        (param $ohfp_out (@witx pointer (@witx char8)))
        (param $ohfp_max_len (@witx usize))
        (param $nwritten_out (@witx pointer (@witx usize)))
        (result $err (expected (error $fastly_status)))
    )

    (@interface func (export "downstream_tls_cipher_openssl_name")
        (param $cipher_out (@witx pointer (@witx char8)))
        (param $cipher_max_len (@witx usize))
        (param $nwritten_out (@witx pointer (@witx usize)))
        (result $err (expected (error $fastly_status)))
    )

    (@interface func (export "downstream_tls_protocol")
        (param $protocol_out (@witx pointer (@witx char8)))
        (param $protocol_max_len (@witx usize))
        (param $nwritten_out (@witx pointer (@witx usize)))
        (result $err (expected (error $fastly_status)))
    )

    (@interface func (export "downstream_tls_client_hello")
        (param $chello_out (@witx pointer (@witx char8)))
        (param $chello_max_len (@witx usize))
        (param $nwritten_out (@witx pointer (@witx usize)))
        (result $err (expected (error $fastly_status)))
    )

    (@interface func (export "downstream_tls_raw_client_certificate")
        (param $raw_client_cert_out (@witx pointer (@witx char8)))
        (param $raw_client_cert_max_len (@witx usize))
        (param $nwritten_out (@witx pointer (@witx usize)))
        (result $err (expected (error $fastly_status)))
    )

    (@interface func (export "downstream_tls_client_cert_verify_result")
        (result $err (expected $client_cert_verify_result (error $fastly_status)))
    )

    (@interface func (export "downstream_tls_ja3_md5")
        ;; must be a 16-byte array
        (param $cja3_md5_out (@witx pointer (@witx char8)))
        (result $err (expected $num_bytes (error $fastly_status)))
    )

    (@interface func (export "downstream_tls_ja4")
        (param $ja4_out (@witx pointer (@witx char8)))
        (param $ja4_max_len (@witx usize))
        (param $nwritten_out (@witx pointer (@witx usize)))
        (result $err (expected (error $fastly_status)))
    )

    (@interface func (export "new")
        (result $err (expected $request_handle (error $fastly_status)))
    )

    (@interface func (export "header_names_get")
        (param $h $request_handle)
        (param $buf (@witx pointer (@witx char8)))
        (param $buf_len (@witx usize))
        (param $cursor $multi_value_cursor)
        (param $ending_cursor_out (@witx pointer $multi_value_cursor_result))
        (param $nwritten_out (@witx pointer (@witx usize)))
        (result $err (expected (error $fastly_status)))
    )

    (@interface func (export "original_header_names_get")
        (param $buf (@witx pointer (@witx char8)))
        (param $buf_len (@witx usize))
        (param $cursor $multi_value_cursor)
        (param $ending_cursor_out (@witx pointer $multi_value_cursor_result))
        (param $nwritten_out (@witx pointer (@witx usize)))
        (result $err (expected (error $fastly_status)))
    )

    (@interface func (export "original_header_count")
        (result $err (expected $header_count (error $fastly_status)))
    )

    (@interface func (export "header_value_get")
        (param $h $request_handle)
        (param $name (list u8))
        (param $value (@witx pointer (@witx char8)))
        (param $value_max_len (@witx usize))
        (param $nwritten_out (@witx pointer (@witx usize)))
        (result $err (expected (error $fastly_status)))
    )

    (@interface func (export "header_values_get")
        (param $h $request_handle)
        (param $name (list u8))
        (param $buf (@witx pointer (@witx char8)))
        (param $buf_len (@witx usize))
        (param $cursor $multi_value_cursor)
        (param $ending_cursor_out (@witx pointer $multi_value_cursor_result))
        (param $nwritten_out (@witx pointer (@witx usize)))
        (result $err (expected (error $fastly_status)))
    )

    (@interface func (export "header_values_set")
        (param $h $request_handle)
        (param $name (list u8))
        ;;; contains multiple values separated by \0
        (param $values (list (@witx char8)))
        (result $err (expected (error $fastly_status)))
    )

    (@interface func (export "header_insert")
        (param $h $request_handle)
        (param $name (list u8))
        (param $value (list u8))
        (result $err (expected (error $fastly_status)))
    )

    (@interface func (export "header_append")
        (param $h $request_handle)
        (param $name (list u8))
        (param $value (list u8))
        (result $err (expected (error $fastly_status)))
    )

    (@interface func (export "header_remove")
        (param $h $request_handle)
        (param $name (list u8))
        (result $err (expected (error $fastly_status)))
    )

    (@interface func (export "method_get")
        (param $h $request_handle)
        (param $buf (@witx pointer (@witx char8)))
        (param $buf_len (@witx usize))
        (param $nwritten_out (@witx pointer (@witx usize)))
        (result $err (expected (error $fastly_status)))
    )

    (@interface func (export "method_set")
        (param $h $request_handle)
        (param $method string)
        (result $err (expected (error $fastly_status)))
    )

    (@interface func (export "uri_get")
        (param $h $request_handle)
        (param $buf (@witx pointer (@witx char8)))
        (param $buf_len (@witx usize))
        (param $nwritten_out (@witx pointer (@witx usize)))
        (result $err (expected (error $fastly_status)))
    )

    (@interface func (export "uri_set")
        (param $h $request_handle)
        (param $uri string)
        (result $err (expected (error $fastly_status)))
    )

    (@interface func (export "version_get")
        (param $h $request_handle)
        (result $err (expected $http_version (error $fastly_status)))
    )

    (@interface func (export "version_set")
        (param $h $request_handle)
        (param $version $http_version)
        (result $err (expected (error $fastly_status)))
    )

    (@interface func (export "send")
        (param $h $request_handle)
        (param $b $body_handle)
        (param $backend string)
        (result $err (expected
                (tuple $response_handle $body_handle)
                (error $fastly_status)))
    )

    ;; The behavior of this method is identical to the original except for the `$error_detail`
    ;; out-parameter.
    ;;
    ;; If the returned `$fastly_status` is OK, `$error_detail` will not be read. Otherwise,
    ;; the status is returned identically to the original `send`, but `$error_detail` is populated.
    ;; Since `$send_error_detail` provides much more granular information about failures, it should
    ;; be used by SDKs as the primary source of error information in favor of `$fastly_status`.
    ;;
    ;; Make sure to initialize `$error_detail` with the full complement of mask values that the
    ;; guest supports. If the corresponding bits in the mask are not set, the host will not populate
    ;; fields in the `$error_detail` struct even if there are values available for those fields.
    ;; This allows forward compatibility when new fields are added.
    (@interface func (export "send_v2")
        (param $h $request_handle)
        (param $b $body_handle)
        (param $backend string)
        (param $error_detail (@witx pointer $send_error_detail))
        (result $err (expected
                (tuple $response_handle $body_handle)
                (error $fastly_status)))
    )

    (@interface func (export "send_async")
        (param $h $request_handle)
        (param $b $body_handle)
        (param $backend string)
        (result $err (expected $pending_request_handle
                (error $fastly_status)))
    )

    (@interface func (export "send_async_streaming")
        (param $h $request_handle)
        (param $b $body_handle)
        (param $backend string)
        (result $err (expected $pending_request_handle (error $fastly_status)))
    )

    (@interface func (export "pending_req_poll")
        (param $h $pending_request_handle)
        (result $err (expected
                (tuple $is_done
                    $response_handle
                    $body_handle)
                (error $fastly_status)))
    )

    ;; See `send_v2` for an explanation of the `$error_detail` out-parameter.
    (@interface func (export "pending_req_poll_v2")
        (param $h $pending_request_handle)
        (param $error_detail (@witx pointer $send_error_detail))
        (result $err (expected
                (tuple $is_done
                    $response_handle
                    $body_handle)
                (error $fastly_status)))
    )

    (@interface func (export "pending_req_wait")
        (param $h $pending_request_handle)
        (result $err (expected
                (tuple $response_handle $body_handle)
                (error $fastly_status)))
    )

    ;; See `send_v2` for an explanation of the `$error_detail` out-parameter.
    (@interface func (export "pending_req_wait_v2")
        (param $h $pending_request_handle)
        (param $error_detail (@witx pointer $send_error_detail))
        (result $err (expected
                (tuple $response_handle $body_handle)
                (error $fastly_status)))
    )

    (@interface func (export "pending_req_select")
        (param $hs (list $pending_request_handle))
        (result $err (expected
                (tuple $done_idx $response_handle $body_handle)
                (error $fastly_status)))
    )

    ;; See `send_v2` for an explanation of the `$error_detail` out-parameter.
    (@interface func (export "pending_req_select_v2")
        (param $hs (list $pending_request_handle))
        (param $error_detail (@witx pointer $send_error_detail))
        (result $err (expected
                (tuple $done_idx $response_handle $body_handle)
                (error $fastly_status)))
    )

    ;;; Returns whether or not the original client request arrived with a
    ;;; Fastly-Key belonging to a user with the rights to purge content on this
    ;;; service.
    (@interface func (export "fastly_key_is_valid")
        (result $err (expected $is_valid (error $fastly_status)))
    )

    (@interface func (export "close")
        (param $h $request_handle)
        (result $err (expected (error $fastly_status)))
    )

    (@interface func (export "auto_decompress_response_set")
        (param $h $request_handle)
        (param $encodings $content_encodings)
        (result $err (expected (error $fastly_status)))
    )

    (@interface func (export "upgrade_websocket")
        (param $backend_name string)
        (result $err (expected (error $fastly_status)))
    )

    (@interface func (export "redirect_to_websocket_proxy")
        (param $backend_name string)
        (result $err (expected (error $fastly_status)))
    )

    (@interface func (export "redirect_to_grip_proxy")
        (param $backend_name string)
        (result $err (expected (error $fastly_status)))
    )

    (@interface func (export "redirect_to_websocket_proxy_v2")
        (param $h $request_handle)
        (param $backend_name string)
        (result $err (expected (error $fastly_status)))
    )

    (@interface func (export "redirect_to_grip_proxy_v2")
        (param $h $request_handle)
        (param $backend_name string)
        (result $err (expected (error $fastly_status)))
    )

    ;;; Adjust how this requests's framing headers are determined.
    (@interface func (export "framing_headers_mode_set")
        (param $h $request_handle)
        (param $mode $framing_headers_mode)
        (result $err (expected (error $fastly_status)))
    )

    ;;; Create a backend for later use
    (@interface func (export "register_dynamic_backend")
        (param $name_prefix string)
        (param $target string)
        (param $backend_config_mask $backend_config_options)
        (param $backend_configuration (@witx pointer $dynamic_backend_config))
        (result $err (expected (error $fastly_status)))
    )
)
